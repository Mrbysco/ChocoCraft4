plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'com.matthewprenger.cursegradle'
    id 'com.modrinth.minotaur'
}

architectury {
    platformSetupLoomIde()
    forge()
}

def generatedResources = file("src/generated")
sourceSets {
    main {
        resources {
            srcDirs += project(":forge").file("src/generated").absolutePath
            exclude '.cache'
        }
    }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
    runs {
        data {
            data()
            programArgs "--all", "--mod", "chococraft"
            programArgs "--output", generatedResources.absolutePath
            programArgs "--existing", project(":common").file("src/main/resources").absolutePath
            programArgs "--existing", file("src/main/resources").absolutePath
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")

    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    modImplementation("vazkii.patchouli:Patchouli:${patchouli_version}")
    modImplementation("xyz.brassgoggledcoders:PatchouliProvider:${patchouli_provider_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveBaseName.set "${rootProject.archives_base_name}-${rootProject.minecraft_version}-${project.name}"
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + rootProject.minecraft_version + "-" + project.name
            from components.java
        }
    }

    repositories {
        if (System.getenv().SAP_SECRET) {
            maven {
                url "https://maven.saps.dev/releases"
                credentials {
                    username = "mrbysco"
                    password = "${System.getenv().SAP_SECRET}"
                }
            }
        }
    }
}

if (System.getenv().CURSEFORGE_KEY) {
    curseforge {
        apiKey = System.getenv().CURSEFORGE_KEY
        project {
            id = project.curseforge_id
            releaseType = "release"
            addGameVersion "Forge"
            addGameVersion "${minecraft_version}"
            addGameVersion "Java 17"
            mainArtifact(remapJar)
            changelog = file("$project.rootDir/changelog.md")
            changelogType = 'markdown'


            relations {
                requiredDependency "architectury-api"
                optionalDependency "patchouli"
            }
        }

        options {
            forgeGradleIntegration = false
        }
    }
}

if (System.getenv().MODRINTH_KEY) {
    String fileContents = file("$project.rootDir/changelog.md").text
    modrinth {
        token = System.getenv().MODRINTH_KEY
        projectId = project.modrinth_id
        versionType = "release"
        versionName = "${archives_base_name} ${minecraft_version}"
        versionNumber = project.version
        uploadFile = remapJar
        changelog = fileContents
        gameVersions = ["${minecraft_version}"]
        loaders = ["forge"]

        dependencies {
            required.project "architectury-api"
            optional.project "patchouli"
        }
    }
}
